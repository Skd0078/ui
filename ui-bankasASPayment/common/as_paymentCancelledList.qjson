let pjson = {
	"pJson": [
		{
			"T": "Messaging",
			"P": {
				"ID": {
					"H": "PageComp",
					"T": "prop"
				},
				"triggerOnRestored": {
					"H": "false",
					"T": "prop"
				},
				"externalEvents": {
					"H": "[{name='itemSelected', params=[]},\r\n{name='clickContinueButton', params=[]}]",
					"T": "prop",
					"HL": "QS"
				}
			},
			"E": {
				"paymentCancelledListInfo": {
					"H": "debugger;\n\nquick.MM.trigger('setConsumerAndScreenInfo')\n\ncomponents.dt_policyPaymentList.items = [];\n\n\nconst serviceRequest: IRequest = {\n  url: '/api/wrapperclient/getPaidInstallmentList',\n  http: 'POST',\n  data: {\n    getPaidInstallmentRequest: {\n      customerNumber: (<any>quick.containerServices).getCustomerContext()?.customerNumber,\n      customerName:   (<any>quick.containerServices).getCustomerContext()?.customerName + ' ' + (<any>quick.containerServices).getCustomerContext()?.customerSurname\n    }\n  },\n  onFail: 'empty',\n  onSuccess: 'empty',\n  responseField: 'empty',\n  blockRender: false\n};\n\n// Tarih formatlama \nfunction formatDateForDisplay(dateString: any) {\n  if (!dateString) return '';\n  if (dateString.includes('-') && dateString.length === 10) {\n    const parts = dateString.split('-');\n    return `${parts[2]}.${parts[1]}.${parts[0]}`;\n  }\n  return dateString;\n}\n\n// Kredi kartı bilgilerini getir\nasync function getCreditCardInfo(cardNumber: any, paymentType: any) {\n  if (paymentType !== 'CCARD' && paymentType !== 'IMCCARD') {\n    return null;\n  }\n  try {\n  components.as_loadingCustomComp?.open?.();\n    const reqData = {\n      customerNo: (<any>quick.containerServices).getCustomerContext()?.customerNumber,\n      branchCode: 0,\n      accountNo: 0,\n      pageSize: 0,\n      pageNumber: 0,\n      transactionType: paymentType === 'IMCCARD' ? 'I' : 'S'\n    };\n\n    const cardListReq: IRequest = {\n      url: '/api/uiclient/retrieveCreditCardList',\n      http: 'POST',\n      data: reqData,\n      onFail: 'empty',\n      onSuccess: 'empty',\n      responseField: 'empty',\n      blockRender: false\n    };\n\n    const resp = await quick.Request.async(cardListReq);\n    const cardInfo = resp?.data?.cardInfo || [];\n    \n    if (Array.isArray(cardInfo) && cardInfo.length > 0) {\n      const searchCardNumber = (cardNumber || '').toString();\n      const last4Digits = searchCardNumber.slice(-4);\n\n      // Kart bul tam numara eşleşmesi veya son 4 hane eşleşmesi\n      const foundCard = cardInfo.find((card: any) => {\n        const cardNo = card.cardNo || card.mainCardNo || '';\n        return (searchCardNumber && cardNo === searchCardNumber) || \n               (last4Digits && cardNo.slice(-4) === last4Digits);\n      }) || cardInfo[0]; \n\n      if (foundCard) {\n        return {\n          embossName: foundCard.embossName || '',\n          availableLimit: foundCard.availableLimit || '0.00'\n        };\n      }\n    }\n  }catch (error) {\n  }\n\n  return null;\n}\n\nquick.Request.async(serviceRequest)?.then(async (resp) => {\n  const list = resp.data.getPaidInstallmentResponse.paidInstallmentList || [];\n  const flatList: any[] = [];\n\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i];\n\n    const paymentTypeRaw = (item.paymentType || '').toUpperCase();\n    const accBranch = Number(item?.accountNumber?.branchCode);\n    const accNumber = Number(item?.accountNumber?.number);\n    const hasAccountInfo = paymentTypeRaw === 'ACCOUNT' && accBranch > 0 && accNumber > 0;\n\n    const paymentTypeDisplay =\n      paymentTypeRaw === 'ACCOUNT'\n        ? (hasAccountInfo ? 'Cari Hesap' : 'Nakit')\n        : paymentTypeRaw === 'CCARD'\n        ? 'Kredi Kartı'\n        : paymentTypeRaw === 'IMCCARD'\n        ? 'İmece Kart'\n        : (item.paymentType || '');\n\n    let accountOrCardNo = '';                                           \n    if (paymentTypeRaw === 'ACCOUNT' && hasAccountInfo) {                \n      accountOrCardNo = `${accBranch}-${accNumber}`;                     \n    } else if (paymentTypeRaw === 'CCARD' || paymentTypeRaw === 'IMCCARD') {\n      accountOrCardNo = item.creditCardNumber || '';                            \n    }\n\n    // 2. ekran için özel kredi kartı formatı\n    let creditCardDisplayForList = accountOrCardNo;\n    \n    if (paymentTypeRaw === 'CCARD' || paymentTypeRaw === 'IMCCARD') {\n      try {\n        const cardInfo = await getCreditCardInfo(item.creditCardNumber, paymentTypeRaw);\n        \n        if (cardInfo && cardInfo.embossName && cardInfo.availableLimit) {\n          const cardNumber = item.creditCardNumber || '';\n          const holderName = cardInfo.embossName;\n          \n          // availableLimit string geliyor format\n          const availableLimit = Number(cardInfo.availableLimit).toLocaleString('tr-TR', {\n            minimumFractionDigits: 2, \n            maximumFractionDigits: 2\n          }) + ' TL';\n          \n          creditCardDisplayForList = `${cardNumber} (${availableLimit}) ${holderName}`;\n        }\n      } catch (error) {\n      }\n    }\n\n    flatList.push({\n      id: i + 1,\n      policyNumber: item.policyNumber?.policyNo + '/' + item.policyNumber?.renewalNo,\n      \n      // Tüm ekranlarda dd.mm.yy formatında görünüm\n      dueDate: formatDateForDisplay(item.installmentDate),\n      \n      insuranceTypeName: item.insuranceTypeName,\n      debitOrCredit: ((item.installmentType || '').toUpperCase() === 'REFUND') ? 'Alacak' : 'Borç',\n      \n      bankRefId : item.bankRefId,\n      paymentType: paymentTypeDisplay,\n      paymentTypeRaw: paymentTypeRaw,\n      accountInfo: item.accountNumber || null,\n\n      creditCardNumber: accountOrCardNo,\n      \n      // 2. ekran için - kart + limit + isim formatı\n      creditCardNumberForList: creditCardDisplayForList,\n      \n      amount: Math.abs(Number(item.amount.amount.amount)).toLocaleString('tr-TR', {\n            minimumFractionDigits: 2, maximumFractionDigits: 2}) + ' ' + item.amount.amount.currencyCode.code,\n\n      paymentId: item.paymentId || '',\n      installmentId: item.installmentId || '',\n      \n      // Tüm ekranlarda dd.mm.yy formatında görünüm\n      installmentDate: formatDateForDisplay(item.installmentDate),\n      \n      transactionId: item.transactionId || '',\n      orderId: item.orderId,\n      customerName: (<any>quick.containerServices).getCustomerContext()?.customerName\n                  + ' ' + (<any>quick.containerServices).getCustomerContext()?.customerSurname,\n      customerNumber: (<any>quick.containerServices).getCustomerContext()?.customerNumber,\n      firmType: item.firmType,\n      insuranceType: item.insuranceType,\n      \n      // orijinal tarihler\n      originalDueDate: item.installmentDate,\n      originalInstallmentDate: item.installmentDate\n    });\n  }\n\n  components.dt_policyPaymentList.items = flatList;\n  quick.store.set('$getPaidInstallmentData', flatList);\n  \n  // Loading kapat - başarılı durumda\n  components.as_loadingCustomComp?.close?.();\n  \n}).catch((error) => {\n  // Loading kapat hata durumunda\n  components.as_loadingCustomComp?.close?.();\n});",
					"C": true,
					"HL": "TS"
				},
				"PostRender": {
					"H": "quick.MM.trigger('paymentCancelledListInfo');\r\n",
					"TO": 1,
					"HL": "TS"
				},
				"setConsumerAndScreenInfo": {
					"H": "debugger;\r\n\r\nquick.store.set('$customConsumerCode', 'TANE.BAHOME');\r\nquick.store.set('$customScreenName', 'TANE.BAHOME');",
					"C": true,
					"HL": "TS"
				}
			},
			"C": {},
			"_Editor": {
				"eID": "EdtrComp_1"
			},
			"O": {
				"cType": "child",
				"layout": {
					"dOpt": {
						"xs": [
							"sp:pt-0",
							"sp:pl-0",
							"sp:pr-0",
							"sp:pb-0"
						]
					},
					"class": "pt-0 pl-0 pr-0 pb-0"
				}
			},
			"S": {
				"xs-xl": {
					"pageBackgroundColor": "#ffffff",
					"statusBarColor": "#ffffff"
				}
			}
		},
		{
			"T": "VContainer",
			"P": {
				"ID": {
					"H": "VContainerComp",
					"T": "prop"
				},
				"class": {
					"H": "'container container--fluid'",
					"T": "class"
				},
				"visible": {
					"H": "true",
					"T": "prop"
				},
				"eager": {
					"H": "true",
					"T": "prop"
				}
			},
			"E": {},
			"C": {
				"default": {
					"c": [
						{
							"T": "VCard",
							"P": {
								"ID": {
									"H": "EdtrComp_276",
									"T": "prop"
								},
								"color": {
									"H": "'white'",
									"T": "prop"
								},
								"visible": {
									"H": "true",
									"T": "prop"
								}
							},
							"E": {},
							"C": {
								"default": {
									"c": [
										{
											"T": "VRow",
											"P": {
												"ID": {
													"H": "EdtrComp_6",
													"T": "prop"
												}
											},
											"E": {},
											"C": {
												"default": {
													"c": [
														{
															"T": "VCol",
															"C": {
																"default": {
																	"c": [
																		{
																			"T": "VRow",
																			"P": {
																				"ID": {
																					"H": "VRowComp",
																					"T": "prop"
																				}
																			},
																			"E": {},
																			"C": {
																				"default": {
																					"c": [
																						{
																							"T": "VCol",
																							"C": {
																								"default": {
																									"c": [
																										{
																											"T": "VDataTable",
																											"P": {
																												"ID": {
																													"H": "dt_policyPaymentList",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"footerProps": {
																													"H": "{showFirstLastPage = true,\nfirstIcon = 'mdi-arrow-collapse-left',\nlastIcon = 'mdi-arrow-collapse-right',\nprevIcon = 'mdi-minus',\nnextIcon = 'mdi-plus'}",
																													"T": "prop"
																												},
																												"headers": {
																													"H": "[{ text = 'Poliçe No / Yenileme No', value= 'policyNumber',filterable= true },\n{ text = 'Vade', value= 'dueDate', filterable= true },\n{ text = 'Sigorta Türü', value= 'insuranceTypeName', filterable= true },\n{ text = 'Borç / Alacak', value= 'debitOrCredit', filterable= true },\n{ text = 'Ödeme Şekli', value= 'paymentType', filterable= true },\n{ text = 'Hesap No/ Kart No', value= 'creditCardNumber', filterable= true },\n{ text = 'Tutar', value= 'amount',filterable= true }]",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"itemsPerPage": {
																													"H": "10",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"mobileBreakpoint": {
																													"H": "600",
																													"T": "prop"
																												},
																												"visible": {
																													"H": "true",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"hideDefaultFooter": {
																													"H": "true",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"disablePagination": {
																													"H": "false",
																													"T": "prop"
																												},
																												"noDataText": {
																													"H": "'Listelenecek Veri Yok.'",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"hideDefaultHeader": {
																													"H": "false",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"fixedHeader": {
																													"H": "true",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"dense": {
																													"H": "true",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"disableSort": {
																													"H": "false",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"dark": {
																													"H": "false",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"itemKey": {
																													"H": "'id'",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"disableFiltering": {
																													"H": "false",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"items": {
																													"H": "[]",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"showSelect": {
																													"H": "true",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"singleSelect": {
																													"H": "true",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"singleExpand": {
																													"H": "false",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"showExpand": {
																													"H": "false",
																													"T": "prop",
																													"HL": "QS"
																												}
																											},
																											"E": {
																												"item-selected": {
																													"H": "debugger;\r\nlet selected = rowObj.item\r\nrowObj.item.selected = rowObj.value\r\nif (rowObj.item.selected == false) {\r\n    components.btn_createOrder.visible = false;\r\n} else {\r\n    quick.store.set('$getPaidInstallmentData', selected)\r\n    components.btn_createOrder.visible = true;\r\n\r\n}\r\n",
																													"P": "rowObj:IVDataTableItemSelect",
																													"HL": "TS"
																												}
																											},
																											"C": {
																												"item.selected": {
																													"c": [
																														{
																															"T": "VCheckbox",
																															"P": {
																																"ID": {
																																	"H": "EdtrComp_46",
																																	"T": "prop"
																																},
																																"color": {
																																	"H": "'primary'",
																																	"T": "prop"
																																},
																																"hideDetails": {
																																	"H": "false",
																																	"T": "prop"
																																},
																																"label": {
																																	"H": "''",
																																	"T": "prop",
																																	"HL": "QS"
																																},
																																"visible": {
																																	"H": "true",
																																	"T": "prop"
																																}
																															},
																															"E": {},
																															"C": {},
																															"_Editor": {
																																"eID": "EdtrComp_46"
																															},
																															"O": {
																																"cType": "slot"
																															}
																														}
																													],
																													"cType": "scopedSlot"
																												}
																											},
																											"_Editor": {
																												"eID": "EdtrComp_25"
																											},
																											"S": {
																												"xs-xl": {
																													"marginLeft": "",
																													"marginRight": "",
																													"marginBottom": "",
																													"marginTop": "",
																													"paddingTop": "",
																													"paddingBottom": "",
																													"paddingLeft": "",
																													"paddingRight": "",
																													"width": "",
																													"height": "",
																													"maxWidth": "",
																													"maxHeight": "",
																													"minWidth": "",
																													"minHeight": "",
																													"unlink": "false",
																													"unlinkMax": "false",
																													"unlinkMin": "false",
																													"isSizeCollapsed": "false",
																													"dense": "",
																													"headerFontColor": "#686868",
																													"headerFontFamily": "Roboto",
																													"headerFontSize": "12px",
																													"headerFontStyle": "normal",
																													"headerFontWeight": "400",
																													"headerCombinedFont": "Roboto-Regular",
																													"headerThemeFont": "Custom",
																													"footerText": "#686868",
																													"footerFontFamily": "Roboto",
																													"footerFontSize": "12px",
																													"footerFontStyle": "normal",
																													"footerFontWeight": "400",
																													"footerCombinedFont": "Roboto-Regular",
																													"footerThemeFont": "Custom",
																													"textColor": "#010101",
																													"itemFontFamily": "Roboto",
																													"itemFontSize": "14px",
																													"itemFontStyle": "normal",
																													"itemFontWeight": "400",
																													"itemsCombinedFont": "Roboto-Regular",
																													"itemsThemeFont": "Custom",
																													"backgroundColor": "#ffffff",
																													"hoverColor": "#ffffff",
																													"footerColor": "#FFFFFF",
																													"headerColor": "#FFFFFF",
																													"selectedBackground": "#FFFFFF",
																													"expandedContent": "#010101",
																													"lineColor": "#0000001f",
																													"lineSize": "1",
																													"boxShadow": "",
																													"boxSizing": "",
																													"borderTopStyle": "solid",
																													"borderRightStyle": "solid",
																													"borderBottomStyle": "solid",
																													"borderLeftStyle": "solid",
																													"borderTopLeftRadius": "4px",
																													"borderTopRightRadius": "4px",
																													"borderBottomLeftRadius": "4px",
																													"borderBottomRightRadius": "4px",
																													"borderTopWidth": "1px",
																													"borderRightWidth": "1px",
																													"borderBottomWidth": "1px",
																													"borderLeftWidth": "1px",
																													"defaultBorderColor": "#0000001f",
																													"sides": "Top,Right,Bottom,Left"
																												}
																											},
																											"O": {
																												"cType": "scopedSlot"
																											}
																										}
																									],
																									"cType": "slot"
																								}
																							},
																							"E": {},
																							"P": {
																								"ID": {
																									"H": "VColComp",
																									"T": "prop"
																								}
																							},
																							"_Editor": {
																								"eID": "EdtrComp_3"
																							},
																							"O": {
																								"cType": "slot",
																								"layout": {
																									"dOpt": {
																										"xs": []
																									},
																									"class": ""
																								}
																							},
																							"S": {
																								"xs-xl": {
																									"col": "",
																									"flexDirection": "column",
																									"alignItems": "",
																									"justifyContent": "",
																									"marginLeft": "",
																									"marginRight": "",
																									"marginBottom": "",
																									"marginTop": "",
																									"paddingTop": "12px",
																									"paddingBottom": "12px",
																									"paddingLeft": "12px",
																									"paddingRight": "12px",
																									"backgroundColor": "#ffffff",
																									"boxShadow": ""
																								}
																							}
																						}
																					],
																					"cType": "slot"
																				}
																			},
																			"_Editor": {
																				"eID": "EdtrComp_4"
																			},
																			"O": {
																				"cType": "slot"
																			},
																			"S": {
																				"xs-xl": {
																					"marginLeft": "0px",
																					"marginRight": "0px",
																					"marginBottom": "0px",
																					"marginTop": "0px",
																					"paddingTop": "",
																					"paddingBottom": "",
																					"paddingLeft": "",
																					"paddingRight": "",
																					"width": "",
																					"height": "",
																					"backgroundColor": "#ffffff",
																					"boxShadow": ""
																				}
																			}
																		}
																	],
																	"cType": "slot"
																}
															},
															"E": {},
															"P": {
																"ID": {
																	"H": "EdtrComp_7",
																	"T": "prop"
																}
															},
															"_Editor": {
																"eID": "EdtrComp_7"
															},
															"O": {
																"cType": "slot",
																"layout": {
																	"dOpt": {
																		"xs": []
																	},
																	"class": ""
																}
															},
															"S": {
																"xs-xl": {
																	"col": "",
																	"flexDirection": "column",
																	"alignItems": "",
																	"justifyContent": "",
																	"marginLeft": "",
																	"marginRight": "",
																	"marginBottom": "",
																	"marginTop": "",
																	"paddingTop": "12px",
																	"paddingBottom": "12px",
																	"paddingLeft": "12px",
																	"paddingRight": "12px",
																	"backgroundColor": "",
																	"boxShadow": "",
																	"boxSizing": "",
																	"borderTopStyle": "",
																	"borderRightStyle": "",
																	"borderBottomStyle": "",
																	"borderLeftStyle": "",
																	"borderTopLeftRadius": "",
																	"borderTopRightRadius": "",
																	"borderBottomLeftRadius": "",
																	"borderBottomRightRadius": "",
																	"borderTopWidth": "",
																	"borderRightWidth": "",
																	"borderBottomWidth": "",
																	"borderLeftWidth": "",
																	"defaultBorderColor": "",
																	"sides": ""
																}
															}
														}
													],
													"cType": "slot"
												}
											},
											"_Editor": {
												"eID": "EdtrComp_6"
											},
											"S": {
												"xs-xl": {
													"marginLeft": "0px",
													"marginRight": "0px",
													"marginBottom": "0px",
													"marginTop": "0px",
													"paddingTop": "",
													"paddingBottom": "",
													"paddingLeft": "",
													"paddingRight": "",
													"width": "",
													"height": "",
													"maxWidth": "",
													"maxHeight": "",
													"minWidth": "",
													"minHeight": "",
													"unlink": "false",
													"unlinkMax": "false",
													"unlinkMin": "false",
													"isSizeCollapsed": "false",
													"backgroundColor": "",
													"boxShadow": "",
													"boxSizing": "",
													"borderTopStyle": "",
													"borderRightStyle": "",
													"borderBottomStyle": "",
													"borderLeftStyle": "",
													"borderTopLeftRadius": "",
													"borderTopRightRadius": "",
													"borderBottomLeftRadius": "",
													"borderBottomRightRadius": "",
													"borderTopWidth": "",
													"borderRightWidth": "",
													"borderBottomWidth": "",
													"borderLeftWidth": "",
													"defaultBorderColor": "",
													"sides": ""
												}
											},
											"O": {
												"cType": "slot"
											}
										}
									],
									"cType": "slot"
								}
							},
							"_Editor": {
								"eID": "EdtrComp_276"
							},
							"O": {
								"cType": "slot"
							}
						}
					],
					"cType": "slot"
				}
			},
			"_Editor": {
				"eID": "EdtrComp_5"
			},
			"O": {
				"cType": "slot",
				"layout": {
					"dOpt": {
						"xs": [
							"sp:pl-0",
							"sp:pt-0",
							"sp:pr-0",
							"sp:pb-0",
							"sp:mt-0",
							"sp:ml-0",
							"sp:mr-0",
							"sp:mb-0"
						]
					},
					"class": "pl-0 pt-0 pr-0 pb-0 mt-0 ml-0 mr-0 mb-0"
				}
			},
			"S": {
				"xs-xl": {
					"marginLeft": "",
					"marginRight": "",
					"marginBottom": "",
					"marginTop": "",
					"paddingTop": "12px",
					"paddingBottom": "12px",
					"paddingLeft": "12px",
					"paddingRight": "12px",
					"width": "",
					"height": "",
					"backgroundColor": "#ffffff",
					"boxShadow": ""
				}
			}
		},
		{
			"T": "VRow",
			"P": {
				"ID": {
					"H": "EdtrComp_2",
					"T": "prop"
				}
			},
			"E": {},
			"C": {
				"default": {
					"c": [
						{
							"T": "VCol",
							"C": {
								"default": {
									"c": [
										{
											"T": "VBtn",
											"P": {
												"ID": {
													"H": "btn_createOrder",
													"T": "prop",
													"HL": "QS"
												},
												"depressed": {
													"H": "true",
													"T": "prop"
												},
												"visible": {
													"H": "false",
													"T": "prop",
													"HL": "QS"
												},
												"DiscardSettings": {
													"H": "true",
													"T": "prop"
												},
												"color": {
													"H": "'#2171DC'",
													"T": "prop"
												},
												"dark": {
													"H": "true",
													"T": "prop"
												},
												"height": {
													"H": "'40px'",
													"T": "prop",
													"HL": "QS"
												},
												"rounded": {
													"H": "true",
													"T": "prop"
												}
											},
											"E": {
												"click": {
													"H": "quick.parent.events.clickContinueButton()",
													"P": "mouseEvent:unknown | undefined",
													"HL": "TS"
												}
											},
											"C": {
												"default": {
													"c": [
														{
															"T": "QLabel",
															"C": {},
															"E": {},
															"P": {
																"ID": {
																	"H": "EdtrComp_16",
																	"T": "prop"
																},
																"text": {
																	"H": "'Devam'",
																	"T": "prop",
																	"HL": "QS"
																}
															},
															"_Editor": {
																"eID": "EdtrComp_16"
															},
															"O": {
																"cType": "child",
																"layout": {
																	"dOpt": {
																		"xs": [
																			"tt:text-body-1",
																			"te:font-weight-regular"
																		]
																	},
																	"class": "text-body-1 font-weight-regular"
																}
															},
															"S": {
																"xs-xl": {
																	"marginTop": "",
																	"marginRight": "",
																	"marginBottom": "",
																	"marginLeft": "",
																	"paddingTop": "",
																	"paddingRight": "",
																	"paddingBottom": "",
																	"paddingLeft": "",
																	"fontColor": "#000000",
																	"fontFamily": "Roboto",
																	"fontSize": "16px",
																	"fontStyle": "normal",
																	"fontWeight": "400",
																	"combinedFont": "Roboto-Regular",
																	"ThemeFont": "Custom",
																	"lineHeight": "20px"
																}
															}
														}
													],
													"cType": "slot"
												}
											},
											"_Editor": {
												"eID": "EdtrComp_15"
											},
											"S": {
												"xs-xl": {
													"marginTop": "",
													"marginRight": "10px",
													"marginBottom": "",
													"marginLeft": "",
													"paddingTop": "",
													"paddingRight": "16px",
													"paddingBottom": "",
													"paddingLeft": "16px",
													"width": "",
													"height": "",
													"maxWidth": "",
													"maxHeight": "",
													"minWidth": "",
													"minHeight": "",
													"unlink": "false",
													"unlinkMax": "false",
													"unlinkMin": "false",
													"isSizeCollapsed": "false",
													"fontColor": "#ffffff",
													"fontFamily": "Roboto",
													"fontSize": "16px",
													"fontStyle": "normal",
													"fontWeight": "400",
													"combinedFont": "Roboto-Regular",
													"ThemeFont": "Custom",
													"lineHeight": "20px",
													"backgroundColor": "#1976D2",
													"disabledBackgroundColor": "rgba(0,0,0,.12)",
													"boxShadow": "",
													"boxSizing": "",
													"borderTopStyle": "solid",
													"borderRightStyle": "solid",
													"borderBottomStyle": "solid",
													"borderLeftStyle": "solid",
													"borderTopLeftRadius": "4px",
													"borderTopRightRadius": "4px",
													"borderBottomLeftRadius": "4px",
													"borderBottomRightRadius": "4px",
													"borderTopWidth": "0px",
													"borderRightWidth": "0px",
													"borderBottomWidth": "0px",
													"borderLeftWidth": "0px",
													"defaultBorderColor": "",
													"sides": "Top,Right,Bottom,Left"
												}
											},
											"SC": {
												"fontColor": {
													"VIcon": "iconColor",
													"QLabel": "fontColor"
												},
												"fontStyle": {
													"QLabel": "fontStyle"
												},
												"fontSize": {
													"QLabel": "fontSize"
												},
												"fontFamily": {
													"QLabel": "fontFamily"
												},
												"fontWeight": {
													"QLabel": "fontWeight"
												},
												"combinedFont": {
													"QLabel": "combinedFont"
												},
												"lineHeight": {
													"QLabel": "lineHeight"
												},
												"bacgroundColor": {
													"VIcon": "backgroundColor"
												}
											},
											"O": {
												"cType": "slot",
												"layout": {
													"dOpt": {
														"xs": [
															"sp:mr-1"
														]
													},
													"class": "mr-1"
												}
											}
										}
									],
									"cType": "slot"
								}
							},
							"E": {},
							"P": {
								"ID": {
									"H": "EdtrComp_14",
									"T": "prop"
								}
							},
							"_Editor": {
								"eID": "EdtrComp_14"
							},
							"O": {
								"cType": "slot",
								"layout": {
									"dOpt": {
										"xs": [
											"d:d-flex",
											"sp:pr-3",
											"sp:pl-3",
											"sp:pb-3",
											"sp:pt-3",
											"j:justify-end"
										]
									},
									"class": "d-flex pr-3 pl-3 pb-3 pt-3 justify-end"
								}
							},
							"S": {
								"xs-xl": {
									"col": "",
									"flexDirection": "column",
									"alignItems": "",
									"justifyContent": "",
									"marginLeft": "",
									"marginRight": "",
									"marginBottom": "",
									"marginTop": "",
									"paddingTop": "12px",
									"paddingBottom": "12px",
									"paddingLeft": "12px",
									"paddingRight": "12px",
									"backgroundColor": "#ffffff",
									"boxShadow": ""
								}
							}
						}
					],
					"cType": "slot"
				}
			},
			"_Editor": {
				"eID": "EdtrComp_2"
			},
			"O": {
				"cType": "slot"
			}
		},
		{
			"T": "CustomComponent",
			"P": {
				"ID": {
					"H": "as_loadingCustomComp",
					"T": "prop",
					"HL": "QS"
				},
				"QJsonPath": {
					"H": "'/static/ui-bankasASPayment/common/as_loadingCustomComp.qjson'",
					"T": "prop",
					"HL": "QS"
				}
			},
			"E": {},
			"C": {
				"default": {
					"c": [
						{
							"T": "Ghost",
							"P": {
								"ID": {
									"H": "EdtrComp_18",
									"T": "prop"
								}
							},
							"E": {},
							"C": {},
							"_Editor": {
								"eID": "EdtrComp_18"
							},
							"O": {
								"cType": "child"
							}
						}
					],
					"cType": "child"
				}
			},
			"_Editor": {
				"eID": "EdtrComp_8"
			},
			"O": {
				"cType": "child",
				"dynProps": true
			}
		}
	],
	"cJson": [
		{
			"T": "Messaging",
			"P": {
				"ID": {
					"H": "PageComp",
					"T": "prop"
				},
				"triggerOnRestored": {
					"H": "╬false╩╩",
					"T": "prop"
				},
				"externalEvents": {
					"H": "╬[]╠{}╠=╣name╩╠'itemSelected'╩╩╠=╣params╩╠[]╩╩╩╠{}╠=╣name╩╠'clickContinueButton'╩╩╠=╣params╩╠[]╩╩╩╩╩",
					"T": "prop",
					"HL": "QS"
				}
			},
			"E": {
				"paymentCancelledListInfo": {
					"H": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar _a, _b, _c, _d;\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n;\r\ndebugger;\r\nquick.MM.trigger('setConsumerAndScreenInfo');\r\ncomponents.dt_policyPaymentList.items = [];\r\nvar serviceRequest = {\r\n    url: '/api/wrapperclient/getPaidInstallmentList',\r\n    http: 'POST',\r\n    data: {\r\n        getPaidInstallmentRequest: {\r\n            customerNumber: (_a = quick.containerServices.getCustomerContext()) === null || _a === void 0 ? void 0 : _a.customerNumber,\r\n            customerName: ((_b = quick.containerServices.getCustomerContext()) === null || _b === void 0 ? void 0 : _b.customerName) + ' ' + ((_c = quick.containerServices.getCustomerContext()) === null || _c === void 0 ? void 0 : _c.customerSurname)\r\n        }\r\n    },\r\n    onFail: 'empty',\r\n    onSuccess: 'empty',\r\n    responseField: 'empty',\r\n    blockRender: false\r\n};\r\n// Tarih formatlama \r\nfunction formatDateForDisplay(dateString) {\r\n    if (!dateString)\r\n        return '';\r\n    if (dateString.includes('-') && dateString.length === 10) {\r\n        var parts = dateString.split('-');\r\n        return parts[2] + \".\" + parts[1] + \".\" + parts[0];\r\n    }\r\n    return dateString;\r\n}\r\n// Kredi kartı bilgilerini getir\r\nfunction getCreditCardInfo(cardNumber, paymentType) {\r\n    var _a, _b, _c, _d;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var reqData, cardListReq, resp, cardInfo, searchCardNumber_1, last4Digits_1, foundCard, error_1;\r\n        return __generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    if (paymentType !== 'CCARD' && paymentType !== 'IMCCARD') {\r\n                        return [2 /*return*/, null];\r\n                    }\r\n                    _e.label = 1;\r\n                case 1:\r\n                    _e.trys.push([1, 3, , 4]);\r\n                    (_b = (_a = components.as_loadingCustomComp) === null || _a === void 0 ? void 0 : _a.open) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n                    reqData = {\r\n                        customerNo: (_c = quick.containerServices.getCustomerContext()) === null || _c === void 0 ? void 0 : _c.customerNumber,\r\n                        branchCode: 0,\r\n                        accountNo: 0,\r\n                        pageSize: 0,\r\n                        pageNumber: 0,\r\n                        transactionType: paymentType === 'IMCCARD' ? 'I' : 'S'\r\n                    };\r\n                    cardListReq = {\r\n                        url: '/api/uiclient/retrieveCreditCardList',\r\n                        http: 'POST',\r\n                        data: reqData,\r\n                        onFail: 'empty',\r\n                        onSuccess: 'empty',\r\n                        responseField: 'empty',\r\n                        blockRender: false\r\n                    };\r\n                    return [4 /*yield*/, quick.Request.async(cardListReq)];\r\n                case 2:\r\n                    resp = _e.sent();\r\n                    cardInfo = ((_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.cardInfo) || [];\r\n                    if (Array.isArray(cardInfo) && cardInfo.length > 0) {\r\n                        searchCardNumber_1 = (cardNumber || '').toString();\r\n                        last4Digits_1 = searchCardNumber_1.slice(-4);\r\n                        foundCard = cardInfo.find(function (card) {\r\n                            var cardNo = card.cardNo || card.mainCardNo || '';\r\n                            return (searchCardNumber_1 && cardNo === searchCardNumber_1) ||\r\n                                (last4Digits_1 && cardNo.slice(-4) === last4Digits_1);\r\n                        }) || cardInfo[0];\r\n                        if (foundCard) {\r\n                            return [2 /*return*/, {\r\n                                    embossName: foundCard.embossName || '',\r\n                                    availableLimit: foundCard.availableLimit || '0.00'\r\n                                }];\r\n                        }\r\n                    }\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    error_1 = _e.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 4: return [2 /*return*/, null];\r\n            }\r\n        });\r\n    });\r\n}\r\n(_d = quick.Request.async(serviceRequest)) === null || _d === void 0 ? void 0 : _d.then(function (resp) { return __awaiter(_this, void 0, void 0, function () {\r\n    var list, flatList, i, item, paymentTypeRaw, accBranch, accNumber, hasAccountInfo, paymentTypeDisplay, accountOrCardNo, creditCardDisplayForList, cardInfo, cardNumber, holderName, availableLimit, error_2;\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n    return __generator(this, function (_k) {\r\n        switch (_k.label) {\r\n            case 0:\r\n                list = resp.data.getPaidInstallmentResponse.paidInstallmentList || [];\r\n                flatList = [];\r\n                i = 0;\r\n                _k.label = 1;\r\n            case 1:\r\n                if (!(i < list.length)) return [3 /*break*/, 7];\r\n                item = list[i];\r\n                paymentTypeRaw = (item.paymentType || '').toUpperCase();\r\n                accBranch = Number((_a = item === null || item === void 0 ? void 0 : item.accountNumber) === null || _a === void 0 ? void 0 : _a.branchCode);\r\n                accNumber = Number((_b = item === null || item === void 0 ? void 0 : item.accountNumber) === null || _b === void 0 ? void 0 : _b.number);\r\n                hasAccountInfo = paymentTypeRaw === 'ACCOUNT' && accBranch > 0 && accNumber > 0;\r\n                paymentTypeDisplay = paymentTypeRaw === 'ACCOUNT'\r\n                    ? (hasAccountInfo ? 'Cari Hesap' : 'Nakit')\r\n                    : paymentTypeRaw === 'CCARD'\r\n                        ? 'Kredi Kartı'\r\n                        : paymentTypeRaw === 'IMCCARD'\r\n                            ? 'İmece Kart'\r\n                            : (item.paymentType || '');\r\n                accountOrCardNo = '';\r\n                if (paymentTypeRaw === 'ACCOUNT' && hasAccountInfo) {\r\n                    accountOrCardNo = accBranch + \"-\" + accNumber;\r\n                }\r\n                else if (paymentTypeRaw === 'CCARD' || paymentTypeRaw === 'IMCCARD') {\r\n                    accountOrCardNo = item.creditCardNumber || '';\r\n                }\r\n                creditCardDisplayForList = accountOrCardNo;\r\n                if (!(paymentTypeRaw === 'CCARD' || paymentTypeRaw === 'IMCCARD')) return [3 /*break*/, 5];\r\n                _k.label = 2;\r\n            case 2:\r\n                _k.trys.push([2, 4, , 5]);\r\n                return [4 /*yield*/, getCreditCardInfo(item.creditCardNumber, paymentTypeRaw)];\r\n            case 3:\r\n                cardInfo = _k.sent();\r\n                if (cardInfo && cardInfo.embossName && cardInfo.availableLimit) {\r\n                    cardNumber = item.creditCardNumber || '';\r\n                    holderName = cardInfo.embossName;\r\n                    availableLimit = Number(cardInfo.availableLimit).toLocaleString('tr-TR', {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2\r\n                    }) + ' TL';\r\n                    creditCardDisplayForList = cardNumber + \" (\" + availableLimit + \") \" + holderName;\r\n                }\r\n                return [3 /*break*/, 5];\r\n            case 4:\r\n                error_2 = _k.sent();\r\n                return [3 /*break*/, 5];\r\n            case 5:\r\n                flatList.push({\r\n                    id: i + 1,\r\n                    policyNumber: ((_c = item.policyNumber) === null || _c === void 0 ? void 0 : _c.policyNo) + '/' + ((_d = item.policyNumber) === null || _d === void 0 ? void 0 : _d.renewalNo),\r\n                    // Tüm ekranlarda dd.mm.yy formatında görünüm\r\n                    dueDate: formatDateForDisplay(item.installmentDate),\r\n                    insuranceTypeName: item.insuranceTypeName,\r\n                    debitOrCredit: ((item.installmentType || '').toUpperCase() === 'REFUND') ? 'Alacak' : 'Borç',\r\n                    bankRefId: item.bankRefId,\r\n                    paymentType: paymentTypeDisplay,\r\n                    paymentTypeRaw: paymentTypeRaw,\r\n                    accountInfo: item.accountNumber || null,\r\n                    creditCardNumber: accountOrCardNo,\r\n                    // 2. ekran için - kart + limit + isim formatı\r\n                    creditCardNumberForList: creditCardDisplayForList,\r\n                    amount: Math.abs(Number(item.amount.amount.amount)).toLocaleString('tr-TR', {\r\n                        minimumFractionDigits: 2, maximumFractionDigits: 2\r\n                    }) + ' ' + item.amount.amount.currencyCode.code,\r\n                    paymentId: item.paymentId || '',\r\n                    installmentId: item.installmentId || '',\r\n                    // Tüm ekranlarda dd.mm.yy formatında görünüm\r\n                    installmentDate: formatDateForDisplay(item.installmentDate),\r\n                    transactionId: item.transactionId || '',\r\n                    orderId: item.orderId,\r\n                    customerName: ((_e = quick.containerServices.getCustomerContext()) === null || _e === void 0 ? void 0 : _e.customerName)\r\n                        + ' ' + ((_f = quick.containerServices.getCustomerContext()) === null || _f === void 0 ? void 0 : _f.customerSurname),\r\n                    customerNumber: (_g = quick.containerServices.getCustomerContext()) === null || _g === void 0 ? void 0 : _g.customerNumber,\r\n                    firmType: item.firmType,\r\n                    insuranceType: item.insuranceType,\r\n                    // orijinal tarihler\r\n                    originalDueDate: item.installmentDate,\r\n                    originalInstallmentDate: item.installmentDate\r\n                });\r\n                _k.label = 6;\r\n            case 6:\r\n                i++;\r\n                return [3 /*break*/, 1];\r\n            case 7:\r\n                components.dt_policyPaymentList.items = flatList;\r\n                quick.store.set('$getPaidInstallmentData', flatList);\r\n                // Loading kapat - başarılı durumda\r\n                (_j = (_h = components.as_loadingCustomComp) === null || _h === void 0 ? void 0 : _h.close) === null || _j === void 0 ? void 0 : _j.call(_h);\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); }).catch(function (error) {\r\n    var _a, _b;\r\n    // Loading kapat hata durumunda\r\n    (_b = (_a = components.as_loadingCustomComp) === null || _a === void 0 ? void 0 : _a.close) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n});\r\n",
					"C": true,
					"HL": "JS"
				},
				"PostRender": {
					"H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\n;\r\nquick.MM.trigger('paymentCancelledListInfo');\r\n",
					"TO": 1,
					"HL": "JS"
				},
				"setConsumerAndScreenInfo": {
					"H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\n;\r\ndebugger;\r\nquick.store.set('$customConsumerCode', 'TANE.BAHOME');\r\nquick.store.set('$customScreenName', 'TANE.BAHOME');\r\n",
					"C": true,
					"HL": "JS"
				}
			},
			"C": {},
			"_Editor": {
				"eID": "EdtrComp_1"
			},
			"O": {
				"cType": "child",
				"layout": {
					"dOpt": {
						"xs": [
							"sp:pt-0",
							"sp:pl-0",
							"sp:pr-0",
							"sp:pb-0"
						]
					},
					"class": "pt-0 pl-0 pr-0 pb-0"
				},
				"compDomClasses": ""
			},
			"S": {
				"xs-xl": {
					"pageBackgroundColor": "#ffffff",
					"statusBarColor": "#ffffff"
				}
			}
		},
		{
			"T": "VContainer",
			"P": {
				"ID": {
					"H": "VContainerComp",
					"T": "prop"
				},
				"class": {
					"H": "╬'container container--fluid'╩╩",
					"T": "class"
				},
				"visible": {
					"H": "╬true╩╩",
					"T": "prop"
				},
				"eager": {
					"H": "╬true╩╩",
					"T": "prop"
				}
			},
			"E": {},
			"C": {
				"default": {
					"c": [
						{
							"T": "VCard",
							"P": {
								"ID": {
									"H": "EdtrComp_276",
									"T": "prop"
								},
								"color": {
									"H": "╬'white'╩╩",
									"T": "prop"
								},
								"visible": {
									"H": "╬true╩╩",
									"T": "prop"
								}
							},
							"E": {},
							"C": {
								"default": {
									"c": [
										{
											"T": "VRow",
											"P": {
												"ID": {
													"H": "EdtrComp_6",
													"T": "prop"
												}
											},
											"E": {},
											"C": {
												"default": {
													"c": [
														{
															"T": "VCol",
															"C": {
																"default": {
																	"c": [
																		{
																			"T": "VRow",
																			"P": {
																				"ID": {
																					"H": "VRowComp",
																					"T": "prop"
																				}
																			},
																			"E": {},
																			"C": {
																				"default": {
																					"c": [
																						{
																							"T": "VCol",
																							"C": {
																								"default": {
																									"c": [
																										{
																											"T": "VDataTable",
																											"P": {
																												"ID": {
																													"H": "dt_policyPaymentList",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"footerProps": {
																													"H": "╬{}╠=╣showFirstLastPage╩╠true╩╩╠=╣firstIcon╩╠'mdi-arrow-collapse-left'╩╩╠=╣lastIcon╩╠'mdi-arrow-collapse-right'╩╩╠=╣prevIcon╩╠'mdi-minus'╩╩╠=╣nextIcon╩╠'mdi-plus'╩╩╩╩",
																													"T": "prop"
																												},
																												"headers": {
																													"H": "╬[]╠{}╠=╣text╩╠'Poliçe No / Yenileme No'╩╩╠=╣value╩╠'policyNumber'╩╩╠=╣filterable╩╠true╩╩╩╠{}╠=╣text╩╠'Vade'╩╩╠=╣value╩╠'dueDate'╩╩╠=╣filterable╩╠true╩╩╩╠{}╠=╣text╩╠'Sigorta Türü'╩╩╠=╣value╩╠'insuranceTypeName'╩╩╠=╣filterable╩╠true╩╩╩╠{}╠=╣text╩╠'Borç / Alacak'╩╩╠=╣value╩╠'debitOrCredit'╩╩╠=╣filterable╩╠true╩╩╩╠{}╠=╣text╩╠'Ödeme Şekli'╩╩╠=╣value╩╠'paymentType'╩╩╠=╣filterable╩╠true╩╩╩╠{}╠=╣text╩╠'Hesap No/ Kart No'╩╩╠=╣value╩╠'creditCardNumber'╩╩╠=╣filterable╩╠true╩╩╩╠{}╠=╣text╩╠'Tutar'╩╩╠=╣value╩╠'amount'╩╩╠=╣filterable╩╠true╩╩╩╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"itemsPerPage": {
																													"H": "╬10╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"mobileBreakpoint": {
																													"H": "╬600╩╩",
																													"T": "prop"
																												},
																												"visible": {
																													"H": "╬true╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"hideDefaultFooter": {
																													"H": "╬true╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"disablePagination": {
																													"H": "╬false╩╩",
																													"T": "prop"
																												},
																												"noDataText": {
																													"H": "╬'Listelenecek Veri Yok.'╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"hideDefaultHeader": {
																													"H": "╬false╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"fixedHeader": {
																													"H": "╬true╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"dense": {
																													"H": "╬true╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"disableSort": {
																													"H": "╬false╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"dark": {
																													"H": "╬false╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"itemKey": {
																													"H": "╬'id'╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"disableFiltering": {
																													"H": "╬false╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"items": {
																													"H": "╬[]╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"showSelect": {
																													"H": "╬true╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"singleSelect": {
																													"H": "╬true╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"singleExpand": {
																													"H": "╬false╩╩",
																													"T": "prop",
																													"HL": "QS"
																												},
																												"showExpand": {
																													"H": "╬false╩╩",
																													"T": "prop",
																													"HL": "QS"
																												}
																											},
																											"E": {
																												"item-selected": {
																													"H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\ndebugger;\r\nvar selected = rowObj.item;\r\nrowObj.item.selected = rowObj.value;\r\nif (rowObj.item.selected == false) {\r\n    components.btn_createOrder.visible = false;\r\n}\r\nelse {\r\n    quick.store.set('$getPaidInstallmentData', selected);\r\n    components.btn_createOrder.visible = true;\r\n}\r\n",
																													"P": "rowObj:IVDataTableItemSelect",
																													"HL": "JS"
																												}
																											},
																											"C": {
																												"item.selected": {
																													"c": [
																														{
																															"T": "VCheckbox",
																															"P": {
																																"ID": {
																																	"H": "EdtrComp_46",
																																	"T": "prop"
																																},
																																"color": {
																																	"H": "╬'primary'╩╩",
																																	"T": "prop"
																																},
																																"hideDetails": {
																																	"H": "╬false╩╩",
																																	"T": "prop"
																																},
																																"label": {
																																	"H": "╬''╩╩",
																																	"T": "prop",
																																	"HL": "QS"
																																},
																																"visible": {
																																	"H": "╬true╩╩",
																																	"T": "prop"
																																}
																															},
																															"E": {},
																															"C": {},
																															"_Editor": {
																																"eID": "EdtrComp_46"
																															},
																															"O": {
																																"cType": "slot"
																															}
																														}
																													],
																													"cType": "scopedSlot"
																												}
																											},
																											"_Editor": {
																												"eID": "EdtrComp_25"
																											},
																											"S": {
																												"xs-xl": {
																													"marginLeft": "",
																													"marginRight": "",
																													"marginBottom": "",
																													"marginTop": "",
																													"paddingTop": "",
																													"paddingBottom": "",
																													"paddingLeft": "",
																													"paddingRight": "",
																													"width": "",
																													"height": "",
																													"maxWidth": "",
																													"maxHeight": "",
																													"minWidth": "",
																													"minHeight": "",
																													"unlink": "false",
																													"unlinkMax": "false",
																													"unlinkMin": "false",
																													"isSizeCollapsed": "false",
																													"dense": "",
																													"headerFontColor": "#686868",
																													"headerFontFamily": "Roboto",
																													"headerFontSize": "12px",
																													"headerFontStyle": "normal",
																													"headerFontWeight": "400",
																													"headerCombinedFont": "Roboto-Regular",
																													"headerThemeFont": "Custom",
																													"footerText": "#686868",
																													"footerFontFamily": "Roboto",
																													"footerFontSize": "12px",
																													"footerFontStyle": "normal",
																													"footerFontWeight": "400",
																													"footerCombinedFont": "Roboto-Regular",
																													"footerThemeFont": "Custom",
																													"textColor": "#010101",
																													"itemFontFamily": "Roboto",
																													"itemFontSize": "14px",
																													"itemFontStyle": "normal",
																													"itemFontWeight": "400",
																													"itemsCombinedFont": "Roboto-Regular",
																													"itemsThemeFont": "Custom",
																													"backgroundColor": "#ffffff",
																													"hoverColor": "#ffffff",
																													"footerColor": "#FFFFFF",
																													"headerColor": "#FFFFFF",
																													"selectedBackground": "#FFFFFF",
																													"expandedContent": "#010101",
																													"lineColor": "#0000001f",
																													"lineSize": "1",
																													"boxShadow": "",
																													"boxSizing": "",
																													"borderTopStyle": "solid",
																													"borderRightStyle": "solid",
																													"borderBottomStyle": "solid",
																													"borderLeftStyle": "solid",
																													"borderTopLeftRadius": "4px",
																													"borderTopRightRadius": "4px",
																													"borderBottomLeftRadius": "4px",
																													"borderBottomRightRadius": "4px",
																													"borderTopWidth": "1px",
																													"borderRightWidth": "1px",
																													"borderBottomWidth": "1px",
																													"borderLeftWidth": "1px",
																													"defaultBorderColor": "#0000001f",
																													"sides": "Top,Right,Bottom,Left"
																												}
																											},
																											"O": {
																												"cType": "scopedSlot",
																												"compDomClasses": "v-data-table v-data-table--dense v-data-table--fixed-header theme--light"
																											}
																										}
																									],
																									"cType": "slot"
																								}
																							},
																							"E": {},
																							"P": {
																								"ID": {
																									"H": "VColComp",
																									"T": "prop"
																								}
																							},
																							"_Editor": {
																								"eID": "EdtrComp_3"
																							},
																							"O": {
																								"cType": "slot",
																								"layout": {
																									"dOpt": {
																										"xs": []
																									},
																									"class": ""
																								},
																								"compDomClasses": "col pb-0"
																							},
																							"S": {
																								"xs-xl": {
																									"col": "",
																									"flexDirection": "column",
																									"alignItems": "",
																									"justifyContent": "",
																									"marginLeft": "",
																									"marginRight": "",
																									"marginBottom": "",
																									"marginTop": "",
																									"paddingTop": "12px",
																									"paddingBottom": "12px",
																									"paddingLeft": "12px",
																									"paddingRight": "12px",
																									"backgroundColor": "#ffffff",
																									"boxShadow": ""
																								}
																							}
																						}
																					],
																					"cType": "slot"
																				}
																			},
																			"_Editor": {
																				"eID": "EdtrComp_4"
																			},
																			"O": {
																				"cType": "slot",
																				"compDomClasses": "row"
																			},
																			"S": {
																				"xs-xl": {
																					"marginLeft": "0px",
																					"marginRight": "0px",
																					"marginBottom": "0px",
																					"marginTop": "0px",
																					"paddingTop": "",
																					"paddingBottom": "",
																					"paddingLeft": "",
																					"paddingRight": "",
																					"width": "",
																					"height": "",
																					"backgroundColor": "#ffffff",
																					"boxShadow": ""
																				}
																			}
																		}
																	],
																	"cType": "slot"
																}
															},
															"E": {},
															"P": {
																"ID": {
																	"H": "EdtrComp_7",
																	"T": "prop"
																}
															},
															"_Editor": {
																"eID": "EdtrComp_7"
															},
															"O": {
																"cType": "slot",
																"layout": {
																	"dOpt": {
																		"xs": []
																	},
																	"class": ""
																},
																"compDomClasses": "col pb-0"
															},
															"S": {
																"xs-xl": {
																	"col": "",
																	"flexDirection": "column",
																	"alignItems": "",
																	"justifyContent": "",
																	"marginLeft": "",
																	"marginRight": "",
																	"marginBottom": "",
																	"marginTop": "",
																	"paddingTop": "12px",
																	"paddingBottom": "12px",
																	"paddingLeft": "12px",
																	"paddingRight": "12px",
																	"backgroundColor": "",
																	"boxShadow": "",
																	"boxSizing": "",
																	"borderTopStyle": "",
																	"borderRightStyle": "",
																	"borderBottomStyle": "",
																	"borderLeftStyle": "",
																	"borderTopLeftRadius": "",
																	"borderTopRightRadius": "",
																	"borderBottomLeftRadius": "",
																	"borderBottomRightRadius": "",
																	"borderTopWidth": "",
																	"borderRightWidth": "",
																	"borderBottomWidth": "",
																	"borderLeftWidth": "",
																	"defaultBorderColor": "",
																	"sides": ""
																}
															}
														}
													],
													"cType": "slot"
												}
											},
											"_Editor": {
												"eID": "EdtrComp_6"
											},
											"S": {
												"xs-xl": {
													"marginLeft": "0px",
													"marginRight": "0px",
													"marginBottom": "0px",
													"marginTop": "0px",
													"paddingTop": "",
													"paddingBottom": "",
													"paddingLeft": "",
													"paddingRight": "",
													"width": "",
													"height": "",
													"maxWidth": "",
													"maxHeight": "",
													"minWidth": "",
													"minHeight": "",
													"unlink": "false",
													"unlinkMax": "false",
													"unlinkMin": "false",
													"isSizeCollapsed": "false",
													"backgroundColor": "",
													"boxShadow": "",
													"boxSizing": "",
													"borderTopStyle": "",
													"borderRightStyle": "",
													"borderBottomStyle": "",
													"borderLeftStyle": "",
													"borderTopLeftRadius": "",
													"borderTopRightRadius": "",
													"borderBottomLeftRadius": "",
													"borderBottomRightRadius": "",
													"borderTopWidth": "",
													"borderRightWidth": "",
													"borderBottomWidth": "",
													"borderLeftWidth": "",
													"defaultBorderColor": "",
													"sides": ""
												}
											},
											"O": {
												"cType": "slot",
												"compDomClasses": "row"
											}
										}
									],
									"cType": "slot"
								}
							},
							"_Editor": {
								"eID": "EdtrComp_276"
							},
							"O": {
								"cType": "slot",
								"compDomClasses": "v-card v-sheet theme--light white"
							}
						}
					],
					"cType": "slot"
				}
			},
			"_Editor": {
				"eID": "EdtrComp_5"
			},
			"O": {
				"cType": "slot",
				"layout": {
					"dOpt": {
						"xs": [
							"sp:pl-0",
							"sp:pt-0",
							"sp:pr-0",
							"sp:pb-0",
							"sp:mt-0",
							"sp:ml-0",
							"sp:mr-0",
							"sp:mb-0"
						]
					},
					"class": "pl-0 pt-0 pr-0 pb-0 mt-0 ml-0 mr-0 mb-0"
				},
				"compDomClasses": "container container--fluid pl-0 pt-0 pr-0 pb-0 mt-0 ml-0 mr-0 mb-0 container container--fluid"
			},
			"S": {
				"xs-xl": {
					"marginLeft": "",
					"marginRight": "",
					"marginBottom": "",
					"marginTop": "",
					"paddingTop": "12px",
					"paddingBottom": "12px",
					"paddingLeft": "12px",
					"paddingRight": "12px",
					"width": "",
					"height": "",
					"backgroundColor": "#ffffff",
					"boxShadow": ""
				}
			}
		},
		{
			"T": "VRow",
			"P": {
				"ID": {
					"H": "EdtrComp_2",
					"T": "prop"
				}
			},
			"E": {},
			"C": {
				"default": {
					"c": [
						{
							"T": "VCol",
							"C": {
								"default": {
									"c": [
										{
											"T": "VBtn",
											"P": {
												"ID": {
													"H": "btn_createOrder",
													"T": "prop",
													"HL": "QS"
												},
												"depressed": {
													"H": "╬true╩╩",
													"T": "prop"
												},
												"visible": {
													"H": "╬false╩╩",
													"T": "prop",
													"HL": "QS"
												},
												"DiscardSettings": {
													"H": "╬true╩╩",
													"T": "prop"
												},
												"color": {
													"H": "╬'#2171DC'╩╩",
													"T": "prop"
												},
												"dark": {
													"H": "╬true╩╩",
													"T": "prop"
												},
												"height": {
													"H": "╬'40px'╩╩",
													"T": "prop",
													"HL": "QS"
												},
												"rounded": {
													"H": "╬true╩╩",
													"T": "prop"
												}
											},
											"E": {
												"click": {
													"H": "Object.defineProperty(exports, \"__esModule\", { value: true });\r\nquick.parent.events.clickContinueButton();\r\n",
													"P": "mouseEvent:unknown | undefined",
													"HL": "JS"
												}
											},
											"C": {
												"default": {
													"c": [
														{
															"T": "QLabel",
															"C": {},
															"E": {},
															"P": {
																"ID": {
																	"H": "EdtrComp_16",
																	"T": "prop"
																},
																"text": {
																	"H": "╬'Devam'╩╩",
																	"T": "prop",
																	"HL": "QS"
																}
															},
															"_Editor": {
																"eID": "EdtrComp_16"
															},
															"O": {
																"cType": "child",
																"layout": {
																	"dOpt": {
																		"xs": [
																			"tt:text-body-1",
																			"te:font-weight-regular"
																		]
																	},
																	"class": "text-body-1 font-weight-regular"
																},
																"compDomClasses": "q-label  text-body-1 font-weight-regular"
															},
															"S": {
																"xs-xl": {
																	"marginTop": "",
																	"marginRight": "",
																	"marginBottom": "",
																	"marginLeft": "",
																	"paddingTop": "",
																	"paddingRight": "",
																	"paddingBottom": "",
																	"paddingLeft": "",
																	"fontColor": "#000000",
																	"fontFamily": "Roboto",
																	"fontSize": "16px",
																	"fontStyle": "normal",
																	"fontWeight": "400",
																	"combinedFont": "Roboto-Regular",
																	"ThemeFont": "Custom",
																	"lineHeight": "20px"
																}
															}
														}
													],
													"cType": "slot"
												}
											},
											"_Editor": {
												"eID": "EdtrComp_15"
											},
											"S": {
												"xs-xl": {
													"marginTop": "",
													"marginRight": "10px",
													"marginBottom": "",
													"marginLeft": "",
													"paddingTop": "",
													"paddingRight": "16px",
													"paddingBottom": "",
													"paddingLeft": "16px",
													"width": "",
													"height": "",
													"maxWidth": "",
													"maxHeight": "",
													"minWidth": "",
													"minHeight": "",
													"unlink": "false",
													"unlinkMax": "false",
													"unlinkMin": "false",
													"isSizeCollapsed": "false",
													"fontColor": "#ffffff",
													"fontFamily": "Roboto",
													"fontSize": "16px",
													"fontStyle": "normal",
													"fontWeight": "400",
													"combinedFont": "Roboto-Regular",
													"ThemeFont": "Custom",
													"lineHeight": "20px",
													"backgroundColor": "#1976D2",
													"disabledBackgroundColor": "rgba(0,0,0,.12)",
													"boxShadow": "",
													"boxSizing": "",
													"borderTopStyle": "solid",
													"borderRightStyle": "solid",
													"borderBottomStyle": "solid",
													"borderLeftStyle": "solid",
													"borderTopLeftRadius": "4px",
													"borderTopRightRadius": "4px",
													"borderBottomLeftRadius": "4px",
													"borderBottomRightRadius": "4px",
													"borderTopWidth": "0px",
													"borderRightWidth": "0px",
													"borderBottomWidth": "0px",
													"borderLeftWidth": "0px",
													"defaultBorderColor": "",
													"sides": "Top,Right,Bottom,Left"
												}
											},
											"SC": {
												"fontColor": {
													"VIcon": "iconColor",
													"QLabel": "fontColor"
												},
												"fontStyle": {
													"QLabel": "fontStyle"
												},
												"fontSize": {
													"QLabel": "fontSize"
												},
												"fontFamily": {
													"QLabel": "fontFamily"
												},
												"fontWeight": {
													"QLabel": "fontWeight"
												},
												"combinedFont": {
													"QLabel": "combinedFont"
												},
												"lineHeight": {
													"QLabel": "lineHeight"
												},
												"bacgroundColor": {
													"VIcon": "backgroundColor"
												}
											},
											"O": {
												"cType": "slot",
												"layout": {
													"dOpt": {
														"xs": [
															"sp:mr-1"
														]
													},
													"class": "mr-1"
												},
												"compDomClasses": "v-btn v-btn--depressed v-btn--rounded theme--dark v-size--default mr-1"
											}
										}
									],
									"cType": "slot"
								}
							},
							"E": {},
							"P": {
								"ID": {
									"H": "EdtrComp_14",
									"T": "prop"
								}
							},
							"_Editor": {
								"eID": "EdtrComp_14"
							},
							"O": {
								"cType": "slot",
								"layout": {
									"dOpt": {
										"xs": [
											"d:d-flex",
											"sp:pr-3",
											"sp:pl-3",
											"sp:pb-3",
											"sp:pt-3",
											"j:justify-end"
										]
									},
									"class": "d-flex pr-3 pl-3 pb-3 pt-3 justify-end"
								},
								"compDomClasses": "col d-flex pr-3 pl-3 pb-3 pt-3 justify-end pb-0"
							},
							"S": {
								"xs-xl": {
									"col": "",
									"flexDirection": "column",
									"alignItems": "",
									"justifyContent": "",
									"marginLeft": "",
									"marginRight": "",
									"marginBottom": "",
									"marginTop": "",
									"paddingTop": "12px",
									"paddingBottom": "12px",
									"paddingLeft": "12px",
									"paddingRight": "12px",
									"backgroundColor": "#ffffff",
									"boxShadow": ""
								}
							}
						}
					],
					"cType": "slot"
				}
			},
			"_Editor": {
				"eID": "EdtrComp_2"
			},
			"O": {
				"cType": "slot",
				"compDomClasses": "row"
			}
		},
		{
			"T": "CustomComponent",
			"P": {
				"ID": {
					"H": "as_loadingCustomComp",
					"T": "prop",
					"HL": "QS"
				},
				"QJsonPath": {
					"H": "╬'/static/ui-bankasASPayment/common/as_loadingCustomComp.qjson'╩╩",
					"T": "prop",
					"HL": "QS"
				}
			},
			"E": {},
			"C": {
				"default": {
					"c": [
						{
							"T": "Ghost",
							"P": {
								"ID": {
									"H": "EdtrComp_18",
									"T": "prop"
								}
							},
							"E": {},
							"C": {},
							"_Editor": {
								"eID": "EdtrComp_18"
							},
							"O": {
								"cType": "child",
								"compDomClasses": ""
							}
						}
					],
					"cType": "child"
				}
			},
			"_Editor": {
				"eID": "EdtrComp_8"
			},
			"O": {
				"cType": "child",
				"dynProps": true,
				"compDomClasses": ""
			}
		}
	],
	"lrids": {},
	"clrids": {},
	"opt": {}
};
export default pjson